<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/escola/services/AlunoService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/escola/services/AlunoService.java" />
              <option name="originalContent" value="package com.example.escola.services;&#10;&#10;import com.example.escola.entities.Aluno;&#10;import com.example.escola.repositories.AlunoRepository;&#10;import com.example.escola.dto.aluno.AlunoRequestDTO;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.security.SecureRandom;&#10;&#10;@Service&#10;public class AlunoService {&#10;    @Autowired&#10;    private AlunoRepository repository;&#10;&#10;    private Aluno convertToEntity(AlunoRequestDTO dto) {&#10;        Aluno aluno = new Aluno();&#10;        aluno.setNomeCompleto(dto.nomeCompleto());&#10;        aluno.setEmail(dto.email());&#10;        aluno.setTelefoneContato(dto.telefoneContato());&#10;        aluno.setCpf(dto.cpf());&#10;        aluno.setRg(dto.rg());&#10;        aluno.setDataNascimento(dto.dataNascimento());&#10;        // Endereço&#10;        if (dto.endereco() != null) {&#10;            aluno.setEnderecoCep(dto.endereco().cep());&#10;            aluno.setEnderecoLogradouro(dto.endereco().logradouro());&#10;            aluno.setEnderecoNumero(dto.endereco().numero());&#10;            aluno.setEnderecoBairro(dto.endereco().bairro());&#10;            aluno.setEnderecoCidade(dto.endereco().cidade());&#10;            aluno.setEnderecoEstado(dto.endereco().estado());&#10;        }&#10;        // Responsável&#10;        if (dto.responsavel() != null) {&#10;            aluno.setResponsavelNome(dto.responsavel().nome());&#10;            aluno.setResponsavelCpf(dto.responsavel().cpf());&#10;            aluno.setResponsavelTelefoneContato(dto.responsavel().telefoneContato());&#10;        }&#10;        return aluno;&#10;    }&#10;&#10;    public void matricularNovoAluno(AlunoRequestDTO dados) {&#10;        Long matriculaUnica = gerarMatriculaUnica();&#10;&#10;        // Usar o método de conversão em vez do construtor&#10;        Aluno novoAluno = convertToEntity(dados);&#10;        novoAluno.setMatricula(matriculaUnica);&#10;&#10;        repository.save(novoAluno);&#10;    }&#10;&#10;    private Long gerarMatriculaUnica() {&#10;        Long matricula;&#10;        do {&#10;            long numeroAleatorio = 100000 + new SecureRandom().nextInt(900000);&#10;            matricula = numeroAleatorio;&#10;        } while (repository.existsById(matricula));&#10;&#10;        return matricula;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.escola.services;&#10;&#10;import com.example.escola.entities.Aluno;&#10;import com.example.escola.repositories.AlunoRepository;&#10;import com.example.escola.dto.aluno.AlunoRequestDTO;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.security.SecureRandom;&#10;&#10;@Service&#10;public class AlunoService {&#10;    @Autowired&#10;    private AlunoRepository repository;&#10;&#10;    private Aluno convertToEntity(AlunoRequestDTO dto) {&#10;        Aluno aluno = new Aluno();&#10;        aluno.setNomeCompleto(dto.nomeCompleto());&#10;        aluno.setEmail(dto.email());&#10;        aluno.setTelefoneContato(dto.telefoneContato());&#10;        aluno.setCpf(dto.cpf());&#10;        aluno.setRg(dto.rg());&#10;        aluno.setDataNascimento(dto.dataNascimento());&#10;        // Endereço&#10;        if (dto.endereco() != null) {&#10;            aluno.setEnderecoCep(dto.endereco().cep());&#10;            aluno.setEnderecoLogradouro(dto.endereco().logradouro());&#10;            aluno.setEnderecoNumero(dto.endereco().numero());&#10;            aluno.setEnderecoBairro(dto.endereco().bairro());&#10;            aluno.setEnderecoCidade(dto.endereco().cidade());&#10;            aluno.setEnderecoEstado(dto.endereco().estado());&#10;        }&#10;        // Responsável&#10;        if (dto.responsavel() != null) {&#10;            aluno.setResponsavelNome(dto.responsavel().nome());&#10;            aluno.setResponsavelCpf(dto.responsavel().cpf());&#10;            aluno.setResponsavelTelefoneContato(dto.responsavel().telefoneContato());&#10;        }&#10;        return aluno;&#10;    }&#10;&#10;    public void matricularNovoAluno(AlunoRequestDTO dados) {&#10;        Long matriculaUnica = gerarMatriculaUnica();&#10;&#10;        // Usar o método de conversão em vez do construtor&#10;        Aluno novoAluno = convertToEntity(dados);&#10;        novoAluno.setMatricula(matriculaUnica);&#10;&#10;        repository.save(novoAluno);&#10;    }&#10;&#10;    private Long gerarMatriculaUnica() {&#10;        Long matricula;&#10;        do {&#10;            long numeroAleatorio = 100000 + new SecureRandom().nextInt(900000);&#10;            matricula = numeroAleatorio;&#10;        } while (repository.existsById(matricula));&#10;&#10;        return matricula;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>